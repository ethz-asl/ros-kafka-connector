#!/usr/bin/env python

import base64
import cv2
import numpy as np

# Paste your base64 string here (without newlines)
base64_string = """ """
# Decode Base64 string to bytes
img_data = base64.b64decode(base64_string)

# Convert bytes to NumPy array
np_arr = np.frombuffer(img_data, np.uint8)

# Decode image using OpenCV
img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
# img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Show the image
if img is not None:
    cv2.imshow("Decoded Image", img)
    cv2.waitKey(0)  # Press any key to close window
    cv2.destroyAllWindows()
else:
    print("Failed to decode image")
